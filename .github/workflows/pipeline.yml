name: Pipeline

on: [workflow_dispatch]

jobs:

  # test job matrix
  test:
    name: Run ${{ matrix.testMode }} tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath: [unity]
        testMode: [playmode, editmode]

    steps:
    
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache
      - uses: actions/cache@v4
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ hashFiles(format('{0}/Assets/**', matrix.projectPath), format('{0}/Packages/**', matrix.projectPath), format('{0}/ProjectSettings/**', matrix.projectPath)) }}
          restore-keys: |
            Library-
      
      # Run tests
      - name: Run ${{ matrix.testMode }} tests
        id: tests
        uses: game-ci/unity-test-runner@v4.1.1
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: test-${{ matrix.testMode }}-results

      # Upload results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.tests.outputs.artifactsPath }}
          path: ${{ steps.tests.outputs.artifactsPath }}
          # if no files match the supplied path, fail job with error
          if-no-files-found: error

  # build job matrix
  build:
    name: Build for ${{ matrix.maroonBuildTarget }}
    runs-on: ubuntu-latest


    # create job matrix
    # runs job once for each build target
    strategy:
      # if fail-fast is set to true, the job will abort if one of the builds fail
      fail-fast: false
      matrix:
        include:
          - targetPlatform: StandaloneWindows64
            maroonBuildTarget: PC
            projectPath: unity

          - targetPlatform: StandaloneWindows64
            maroonBuildTarget: VR
            projectPath: unity

          - targetPlatform: WebGL
            maroonBuildTarget: WebGL
            projectPath: unity

    # this step is needed because the free GitHub runners come with limited disk space
    # the action deletes unused files, packages and dependencies that the GitHub runner provides
    # more info:
    # https://game.ci/docs/troubleshooting/common-issues#no-space-left-on-device
    # https://github.com/marketplace/actions/free-disk-space-ubuntu
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # excluded because they might be needed
          docker-images: false
          swap-storage: false
          # excluded since it takes a very long time to run
          large-packages: false

      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache
      - uses: actions/cache@v4
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ hashFiles(format('{0}/Assets/**', matrix.projectPath), format('{0}/Packages/**', matrix.projectPath), format('{0}/ProjectSettings/**', matrix.projectPath)) }}
          restore-keys: |
            Library-
            
      # Build
      - name: Build
        uses: game-ci/unity-builder@v4.2.1
        id: build

        # environment vars needed by unity-builder to activate the unity license
        # defined in the Actions Secrets in the repo settings
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

        with:
          # run the custom build script
          buildMethod: Maroon.Build.BuildPlayer.ActionsBuild
          # with these params:
          customParameters: -maroonBuildPath ../build -maroonBuildTarget ${{ matrix.maroonBuildTarget }}
          # we must specify a target platform, build path, build name and project path for unity-builder
          targetPlatform: ${{ matrix.targetPlatform }}
          projectPath: ${{ matrix.projectPath }}
          buildName: ${{ matrix.maroonBuildTarget }}
          buildsPath: build
          
      # Upload build
      - name: Upload build for ${{ matrix.maroonBuildTarget }}
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.maroonBuildTarget }}
          path: build
          # if no files match the supplied path, fail job with error
          if-no-files-found: error

  # deploy build
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - name: Deploying build
        run: |
          echo "Deploying..."
          mkdir build
          echo "Commit hash:   ${{ github.sha }}"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          path: build/

        
      - name: Upload to Steam
        run: |
          ls -R
      


  
  

